inoremap ii <ESC>
" also remapped delete key on kinesis advantage to escape, 
" but this is more uniform


nnoremap <SPACE> <Nop>
let mapleader = "\<space>" 

nmap Y y$

nmap h <PageUp>
nmap l <PageDown>
nmap <Leader>q :qa<cr>

nmap <bs><LeftMouse> :cnext<cr>
nmap <bs><RightMouse> :cprev<cr>

nmap <BS>n :cnext<cr>
nmap <Leader>p :cprev<cr>

nmap ]q :cnext<cr>
nmap [q :cprev<cr>

nmap ]w :lnext<cr>
nmap [w :lprev<cr>

map <X1Mouse> <C-O>
map <X2Mouse> <C-I>


nmap <bs>e :Make!<cr>
nmap <bs>i :Termdebug<cr>

let g:pandoc#formatting#mode = 'hA'


map <Leader>o :Files<Cr>
map <Leader>b :Buffers<Cr>
set runtimepath^=~/.fzf

imap <c-f> <c-x><c-f>
imap <c-l> <c-x><c-l>

" use fzf variants to provide these completion kinds
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-l> <plug>(fzf-complete-line)



" searching and grepping
if executable('rg')
	" make :grep and :psearch use ripgrep
	set grepprg=rg\ --vimgrep
	
	" make file:line:col: be recognized so that when it 
	" you can jump right to the column from the quickfix 
	" list
	set grepformat+=%f:%l:%c:%m
	" TODO hard-set grep format to only this instead?
	" reinserts the less specific versions after this, 
	" otherwise they get used instead
	set grepformat-=%f:%l:%m
	set grepformat+=%f:%l:%m
	set grepformat-=%f:%l%m
	set grepformat+=%f:%l%m

	function! FindSymbol()
		:cexpr system("rg --fixed-strings --vimgrep " . shellescape(expand("<cword>")))
	endfunction
else
	set grepprg=grep\ -Hnr\ --exclude-dir=.git
	function! FindSymbol()
		:cexpr system("grep -F -n " . shellescape(expand("<cword>")))
	endfunction
endif

" find symbol under cursor
map <leader>s :call FindSymbol()<cr>

" global search
map g/ :grep<space>

" ignore vcs dirs when expanding wildcards.
set wildignore+=*/.git/*
" ignore tags files
set wildignore+=tags

set mouse=a
set nocompatible
set encoding=utf8
set noswapfile
" set expandtab
" set tabstop=4
set autoindent
set autowriteall
set autoread
set backspace=indent,eol,start
set completeopt=menu,menuone
" only show any additional information such as attached docs in the preview window and only if it 
" is already open
set completeopt+=preview
set incsearch
set ignorecase
set ruler
set isfname-=: " make file linenumber , e.g.: file.c:32 work with gF on windows
set wildmenu
 " make words-with-hyphens count as one word
 " comment this out when working with C, lookup of `var` in  
 " `var->` doesn't work otherwise
" set iskeyword+=-
set clipboard^=unnamed
set clipboard^=unnamedplus
set splitbelow " open new splits below the current one instead of above
set splitright " open new splits to the right instead of to the left
set number
set relativenumber
set tw=60 " good fit on 29" screen
" setting formatting options, see `:h fo-table` for details on each flag
" enable formatting of comments with gq
set  formatoptions=q
" enable autoformatting
"set formatoptions+=a
" autoformatting of text, applies to "
" anything that is not-comments, such as code. if set here, 
" need to unset it in filetype specific config for code.
" set formatoptions+=t
" autoformatting of comments
set formatoptions+=c
" insert comment leader at start of line while writing a 
" comment in insert mode
set formatoptions+=r
" insert comment leader at start of line while on a comment 
" in normal mode and hitting o/O
set formatoptions+=o
" only join line if it ends with a space
set formatoptions+=w
" remove comment leader when joining lines
set formatoptions+=j
" don't add two spaces between sentences when joininglines
set nojoinspaces
" format numbered lists when formatting text
set formatoptions+=n
" don't break long lines when in insert mode. this relaxes 
" autoformatting which is useful in some cases. if the line 
" started as a long line, it will remain a long line.
set formatoptions+=l
" set scrolloff=4
set scrolloff=0
set shell=/bin/bash
let $BASH_ENV = "~/.bash_aliases"

" set shiftwidth=4 
" set softtabstop=4
set bg=dark
let g:tex_flavor='latex'
let g:Tex_ViewRule_pdf='zathura'
let g:Tex_DefaultTargetFormat='pdf'
" quiet a warning when putting an opening brace on it's own line, from https://github.com/vim-syntastic/syntastic/issues/2169
let g:syntastic_tex_lacheck_quiet_messages = { 'regex': '\Vpossible unwanted space at' }

" remove top banner
" let g:netrw_banner = 0
" expandable tree file listing 
let g:netrw_liststyle=3
" netrw window height when split
let g:netrw_winsize=30

let g:pathogen_disabled = ['syntastic', 'vim-pandoc', 'coc.nvim', 'YouCompleteMe',]
runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect() 
call pathogen#helptags()

filetype plugin indent on
syntax on

au BufRead,BufNewFile *.Rtex set filetype=rnoweb
au BufRead,BufNewFile *.jrag set filetype=java
au BufRead,BufNewFile *.jadd set filetype=java
au BufRead,BufNewFile *.tt set filetype=java

autocmd FileType python BracelessEnable +indent +fold

augroup CursorLine
	" Highlight the line under the cursor in the 
	" active window
	" from https://vim.fandom.com/wiki/Highlight_current_line
	au!
	au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
	au WinLeave * setlocal nocursorline
augroup END


au BufRead,BufNewFile *.pl set filetype=perl

" autosave when buffer is modified
" autocmd BufRead * autocmd TextChanged,TextChangedI <buffer> silent write
" autosave every updatetime milliseconds
function AutoSave()
	if !&readonly 
		if &buftype == ""
			silent checktime 
			" comment this out to only autodetect updates to the underlying file
			silent write 
		endif 
	endif
endfunction 
autocmd BufRead * autocmd CursorHold <buffer> :call AutoSave()
" set updatetime to 1 second instead of the default 4 seconds
set updatetime=1000

" UltiSnips triggering. from https://github.com/ycm-core/YouCompleteMe/issues/2032
let g:UltiSnipsExpandTrigger = '<C-j>'
let g:UltiSnipsJumpForwardTrigger = '<C-j>'
let g:UltiSnipsJumpBackwardTrigger = '<C-k>'

colorscheme monochrome

command Gist Gstatus
command Gipu Gpull
command Gips Git push
command Gica Gcommit -a

map <leader>c :Gcommit -a<CR>
map <leader>d :Gdiff<CR>


command Vrc edit $MYVIMRC

command Ecolors edit ~/.vim/bundle/vim-monochrome/colors/monochrome.vim
" lists all the active syntax highlighting groups in their own color (from :help hi)
command Hitest source $VIMRUNTIME/syntax/hitest.vim

" insert reference to the current position on the form filename:linenumber: in the
" paste buffer
map <Leader>l :s+$+\= "\n" . expand('%') . ":" . line('.') . ":"+ <bar> norm ddk<CR>

map <leader>n :new <bar> set buftype=nofile<CR>

map <leader>f <c-w>F

" execute current line by piping to bash
nmap <Leader>x !!bash<CR>
" execute current line interactively in a new :terminal window.
" using this with the cursor on a blank line opens up a new terminal.
" get to the next blank line fast with '}'
" useful for interactive programs (i.e. that require tty)
nmap <localleader>x :terminal <c-r><c-l><CR>

" execute current selection by piping to bash
vmap <Leader>x !bash<CR>

" the :Man command opens up the manpage in a new split
runtime ftplugin/man.vim
set keywordprg=:Man

runtime local/*.vim
